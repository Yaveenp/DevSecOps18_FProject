version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: investment_postgres
    restart: always
    environment:
      POSTGRES_DB: investment_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: thisisastrongpassword
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - portfolio_files:/uploads
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    command: |
      bash -c "
      # Create the uploads directory for portfolio files
      mkdir -p /uploads
      chmod -R 755 /uploads
      # Make init script executable inside container
      chmod +x /docker-entrypoint-initdb.d/init-db.sh
      # Start postgres normally
      docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d investment_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # # Optional: Flask application service (if you want to containerize the Python app too)
  # flask-app:
  #   build: .  # Assumes you have a Dockerfile in the same directory
  #   container_name: investment_flask
  #   restart: always
  #   environment:
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_DB=investment_db
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=thisisastrongpassword
  #     - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-your-api-key-here}
  #     - FLASK_ENV=development
  #   ports:
  #     - "5050:5050"
  #   volumes:
  #     - portfolio_files:/uploads
  #     - ./:/app
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   working_dir: /app

volumes:
  pgdata:
    driver: local
  portfolio_files:
    driver: local

networks:
  default:
    name: investment_network